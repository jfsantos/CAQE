#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
A general intelligibility configuration for evaluating overall speech intelligibility
of a set of audio stimuli.
"""
import itertools

# ---------------------------------------------------------------------------------------------
# TESTING VARIABLES
TEST_TYPE = 'intelligibility'

# ---------------------------------------------------------------------------------------------
# FRONT-END VARIABLES
TEST_TIMEOUT_SEC = 5.
PREVIEW_HTML = """
    <p>This listening test aims to rate the intelligibility of a set of signals.</p>

    <p>During the test, you will be asked to transcribe speech sentences. The test will have two main parts:
    1) a training phase and 2) an evaluation phase. During the training phase, you
    will be trained on example ratings of intelligibility. During the evaluation phase, you will listen to several of pairs
     of recordings and choose which recording in each pair has higher intelligibility.</p>

    <p>The expected total duration of the test is 5-7 minutes.</p>

    <p>However, if this is your first HIT in this group, there will also be additional surveys and hearing tests, which
    will increase the expected total duration of the first HIT is 8-10 minutes. Because this first HIT takes longer than
    the rest of the HITs in this group, you will be given an additional $0.30 bonus.</p>
    """

# ---------------------------------------------------------------------------------------------
# DEFAULT CONDITION AND TEST-SPECIFIC VARIABLES
#   (These will be configured for each condition and saved in the database)
test_title = 'Task: Transcribe the sentence'

first_task_introduction_html = """
    <p>This listening test aims to rate the intellgiibility of a set of signals.</p>

    <p>During the training phase, you will be trained on example ratings of intelligibility. During the evaluation phase,
    you will listen to several recordings and be asked to write down all of the words you can understand.
    Lastly, at the end, there will be a short survey which you will only have to fill out for the first HIT you
    complete.</p>
    """

introduction_html = """
    <p>This listening test aims to rate the intelligibility of a set of signals.</p>

    <p>During the training phase, you will be trained on example ratings of intelligibility. During the evaluation phase, you
    will listen to several recordings and be asked to write down all of the words you can understand.</p>
    """

training_instructions_html = """
    <p><intelligibility_explanation></p>

    <p>Instructions:
    <ol>
    <li>If you have not done so already, set the volume of your headphones/speakers so that
    it's comfortable. You should be able to clearly hear differences between recordings
    (the volume shouldn't be changed later on).</li>
    <li>Train yourself on the example recordings to learn what types of recordings you
    should expect to listen during the evaluation phase.</li>
    </ol>
    </p>
    """

evaluation_instructions_html = """
    <p>Listen to the entire recording and type down all of the words you can understand.
    The order of the words does not need to be the same as in the sentence. <intelligibility_explanation></p>

    <p>Note: you can only listen to the recording once.</p>
    """

num_audio_files = 10

# The quality scales
intelligibilities = ['<b>transcription</b> for each recording', ]

# Descriptions of the quality scales
intelligibility_explanations = ['<b>transcription</b> refers to what words of a recording you were able to identify.']


# ---------------------------------------------------------------------------------------------
# TRAINING EXAMPLES FOR PARTICIPANTS
# These are the reference examples for the training examples
# List entries must be dicts composed as {<reference_name>: <example_url>, ...}
#reference_example_dicts = [{'Reference': '/audio/exp00_target.wav', }, ]

# These are the intelligibility examples.
# List entries should be dicts composed as {<description>: <example_url>, ...}
#intelligibility_example_dicts = [{'Low': ['/audio/exp00_anchorArtif.wav',
#                                  '/audio/exp00_anchorDistTarget.wav'],
#                          'High': ['/audio/exp00_target.wav', ]}, ]

TESTS = []
conditions = []
for intelligibility, intelligibility_explanation in zip(intelligibilities, intelligibility_explanations):
    test_cfg_vars = {}

    test_cfg_vars['test_title'] = test_title
    test_cfg_vars['test_title'] = test_cfg_vars['test_title'].replace('<intelligibility>', intelligibility)

    test_cfg_vars['introduction_html'] = introduction_html
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<intelligibility>', intelligibility)
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<intelligibility_explanation>', intelligibility_explanation)

    test_cfg_vars['first_task_introduction_html'] = first_task_introduction_html
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<intelligibility>', intelligibility)
    test_cfg_vars['first_task_introduction_html'] = test_cfg_vars['first_task_introduction_html'].replace('<intelligibility_explanation>', intelligibility_explanation)

    test_cfg_vars['training_instructions_html'] = training_instructions_html
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<intelligibility>', intelligibility)
    test_cfg_vars['training_instructions_html'] = test_cfg_vars['training_instructions_html'].replace('<intelligibility_explanation>', intelligibility_explanation)

    test_cfg_vars['evaluation_instructions_html'] = evaluation_instructions_html
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<intelligibility>', intelligibility)
    test_cfg_vars['evaluation_instructions_html'] = test_cfg_vars['evaluation_instructions_html'].replace('<intelligibility_explanation>', intelligibility_explanation)

    test = {'test_config_variables': test_cfg_vars,
            'condition_groups': []}

    for i in range(1, num_audio_files + 1):
        # THE AUDIO STIMULUS FILES
        group_data = {'stimulus_files': [['S1', 'exp%02d.wav' % i]]}

        conditions = []
        for stimulus_pair in itertools.combinations([l[0] for l in group_data['stimulus_files']], 2):
            condition_data = {'stimulus_keys': stimulus_pair,
                              'evaluation_instructions_html': None}
            conditions.append(condition_data)
        group_data['conditions'] = conditions
        test['condition_groups'].append(group_data)
    TESTS.append(test)

CONDITIONS_PER_EVALUATION = len(conditions) / 2
