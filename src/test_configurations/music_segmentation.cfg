#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
A timing marking configuration for collecting music segmentation boundaries
of a set of music clips.

For information on how this configuration is used to gather music segmentation annotations,
please read (and cite if applicable) our paper or contact the author:

Wang, Cheng-I., Gautham J. Mysore, and Shlomo Dubnov.
"RE-VISITING THE MUSIC SEGMENTATION PROBLEM WITH CROWDSOURCING.".
Proceedings of the International Society of Music Information Retrieval Conference (ISMIR), 2017.

This configuration is adjusted for demonstration purpose and is not the original settings used in the paper.

Author: Cheng-i Wang
Email: chw160@ucsd.edu

"""

# ---------------------------------------------------------------------------------------------
# TESTING VARIABLES
TEST_TYPE = 'segmentation'
STIMULUS_ORDER_RANDOMIZED = False
TEST_CONDITION_ORDER_RANDOMIZED = True
TEST_CONDITION_GROUP_ORDER_RANDOMIZED = True
AUDIO_FILE_DIRECTORY = "http://acsweb.ucsd.edu/~chw160/caqe_segmentation_demo/"
EXTERNAL_FILE_HOST = True
ENCRYPT_AUDIO_STIMULI_URLS = True
HEARING_RESPONSE_ESTIMATION_ENABLED = False
LIMIT_SUBJECT_TO_ONE_TASK_TYPE = True
AUDIO_CODEC = 'mp3'
BEGIN_TITLE = 'Identifying when a song changes from one part to another'

# ---------------------------------------------------------------------------------------------
# MECHANICAL TURK VARIABLES

MTURK_TITLE = 'Marking Boundaries between Parts of a Song'
MTURK_DESCRIPTION = 'Listening to audio clips from different songs, ' \
                    'then marking boundaries between parts of a song.'
MTURK_REWARD = 1.5
MTURK_FIRST_HIT_BONUS = 0.0
MTURK_AUTO_APPROVAL_DELAY_IN_SECONDS = 60 * 60 * 24 * 1 # 1 day
MTURK_MAX_ASSIGNMENTS = 30

# ---------------------------------------------------------------------------------------------
# FRONT-END VARIABLES
TEST_TIMEOUT_SEC = 60.
PREVIEW_HTML = """
    <p>This listening task aims at collecting the <b>boundary timings</b> between parts of a song.</p>

    <p>During this task, you will be asked to listen for <b>when</b> a part of a song changes to another.</p>

    <p>The expected duration of the task is 8-12 minutes.</p>

    <p>However, if this is your first HIT in this group, the total duration is expected to be 12-16 minutes as there 
    will be additional surveys and a training session. You will be given an additional bonus of $0.5 for the HIT if the 
    results passed a hidden/reference check based on boundary identification accuracy.</p>
    """

# ---------------------------------------------------------------------------------------------
# DEFAULT CONDITION AND TEST-SPECIFIC VARIABLES
#   (These will be configured for each condition and saved in the database)
test_title = 'Task: Mark the <audio_event>'

first_task_introduction_html = """
    <p>This listening task aims at collecting the <b>boundary timings</b> between parts of a song.</p>

    <p>During this task, you will be asked to listen for <b>when</b> a part of a song changes to another.
    At the end of this task, there will be a short survey, which you will only have to fill out for the first HIT you
    complete.</p>
    
    <p>Please make sure that third-party cookies are enabled in your browser.</p>
    
    """

introduction_html = """
    <p>This listening task aims at collecting the <b>boundary timings</b> between parts of a song.</p>

    <p>During this task, you will be asked to listen for <b>when</b> a part of a song changes to another.
    </p>
    """

training_instructions_html = """
    <p><audio_event_explanation></p>

    <p>Instructions:
    <ol>
    <li>If you have not done so already, set the volume of your headphones/speakers so that
    it's at a comfortable volume to listen to music. Please do not change the volume during the task.</li>
    <li>Please watch the <b>instructional video</b>. You need to finish watching this video, and you can pause or rewind 
    to 3 seconds ago but are not allowed to forward.</li>
    </ol>
    </p>
    """

evaluation_instructions_html = """
    <p>
        <ol type="1">
            <li>Please click the Play/Pause button to first listen to the <b>entire</b> clip music.
            The other buttons are <b>disabled</b> until you finish the first full listening of the clip.
            </li>
            <li>After the first full listening, you can click on the <b>Boundary Selection Slider</b> to select where
            you hear the change in the part of the music. The black vertical line will be your marking and indicates the 
            exact place in which you hear a change. The dark green rectangle is just the area around the black line. If 
            you do not hear any change, please click on the <b>No change heard</b> button. 
            </li>
            <li>You can use the <b>Audio Progress Bar</b> to listen to specific parts of the clip again if you would 
            like.
            </li>
            <li>You can also listen to your selected boundary by clicking the <b>Check selection</b> button. It will
            play from just before your marking to a little after your marking.
            </li>
            <li>If you are satisfied with your marking, click on the <b>Change heard</b> button. If you did not hear
            any change of parts of the music clip, click on the <b>No change heard</b> button. You can only go to the next
            trial by clicking on <b>Next Trial</b> button after choosing either the <b>Change heard</b> or
            <b>No change heard</b> button.
            </li>
        </ol>
    </p>

    """

num_audio_files = 4
num_test_sets = 3


references = (('Reference', 'The hidden signal to which the annotations of the turkers are checked.'),)

# The audio event description
audio_events = ['<b>Boundaries between Parts of a Song</b>', ]

# Descriptions of the quality scales
audio_event_explanations = [
    'The goal of the task is to determine when a part of a song changes to another. '
    'The audio clips that we will present to you are snippets from a variety of songs. '
    'There is no exact definition on what should be considered a change. '
    'Just choose what sounds like a change in the part of a song to you.', ]

# ---------------------------------------------------------------------------------------------
# TRAINING EXAMPLES FOR PARTICIPANTS
# These are the reference examples for the training examples
# List entries must be dicts composed as {<reference_name>: <example_url>, ...}

# These are the quality examples.
# List entries should be dicts composed as {<description>: <example_url>, ...}

instruction_videos = ['https://dl.dropboxusercontent.com/u/4893373/videos/instructional_video_1', ]

TESTS = []
conditions = []
for audio_event, audio_event_explanation, instruction_video in zip(audio_events,
                                                                   audio_event_explanations,
                                                                   instruction_videos
                                                                   ):
    test_cfg_vars = dict()
    test_cfg_vars['references'] = references

    test_cfg_vars['instruction_video'] = instruction_video

    test_cfg_vars['test_title'] = test_title
    test_cfg_vars['test_title'] = test_cfg_vars['test_title'].replace('<audio_event>', audio_event)

    test_cfg_vars['introduction_html'] = introduction_html
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['introduction_html'] = test_cfg_vars['introduction_html'].replace('<audio_event_explanation>',
                                                                                    audio_event_explanation)

    test_cfg_vars['first_task_introduction_html'] = first_task_introduction_html
    test_cfg_vars['first_task_introduction_html'] = \
        test_cfg_vars['first_task_introduction_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['first_task_introduction_html'] = \
        test_cfg_vars['first_task_introduction_html'].replace('<audio_event_explanation>', audio_event_explanation)

    test_cfg_vars['training_instructions_html'] = training_instructions_html
    test_cfg_vars['training_instructions_html'] = \
        test_cfg_vars['training_instructions_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['training_instructions_html'] = \
        test_cfg_vars['training_instructions_html'].replace('<audio_event_explanation>', audio_event_explanation)

    test_cfg_vars['evaluation_instructions_html'] = evaluation_instructions_html
    test_cfg_vars['evaluation_instructions_html'] = \
        test_cfg_vars['evaluation_instructions_html'].replace('<audio_event>', audio_event)
    test_cfg_vars['evaluation_instructions_html'] = \
        test_cfg_vars['evaluation_instructions_html'].replace('<audio_event_explanation>', audio_event_explanation)

    test = {'test_config_variables': test_cfg_vars,
            'condition_groups': []}

    for i in range(1, num_test_sets + 1):
        # THE AUDIO STIMULUS FILES
        group_data = {
            'reference_files': [['Reference', 'seg%02d_04.mp3' % i ]],
            'stimulus_files': []
        }
        for j in range(1, num_audio_files+1):
            group_data['stimulus_files'].append(['S%02d_%02d' % (i, j), 'seg%02d_%02d.mp3' % (i, j)])

        conditions = []
        for clip in group_data['stimulus_files']:
            condition_data = {
                'reference_keys': ['Reference', ],
                'stimulus_keys': (clip[0], clip[0]),
                'evaluation_instructions_html': None
            }
            conditions.append(condition_data)
        group_data['conditions'] = conditions
        test['condition_groups'].append(group_data)
    TESTS.append(test)

CONDITIONS_PER_EVALUATION = len(conditions)
